extends layout

block javascript
	script(src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js")
	script(src="http://cdn.sockjs.org/sockjs-0.3.min.js")
	script(src="http://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.3.1/lodash.js")
	
	script(src="http://code.createjs.com/createjs-2013.05.14.min.js")
	
	script(src="../client/ColorSubstitutionFilter.js")
	script(src="../client/Config.js")
	// addons.js may change to be generated by server rather than a static file:
	script(src="../client/addons.js")
	script(src="../client/Avatar.js")
	script(src="../client/AvatarAssets.js")
	script(src="../client/Polaroid.js")
	script(src="../client/Comm.js")
	script(src="../client/main.js")
	
	script(type='text/javascript').
		var token = '#{token}';
		var session = '#{session}';

		
block content
	h1 SiSSYFiGHT 2000&frac12;
	
	p: form(method='post',action='/user/logout')
		input(type='submit', value='log out')
			
	script(type='text/javascript').
		window.onload = function() {
			start(SockJS, {token:token, session:session, endpoint:'/sox'});
		}
		
	div
		span Connected:
		input#status no
		
	style.
		/*	attempt to scale up canvas while preserving pixels - 
			fails to prevent blurring on firefox and chrome, but works on safari and ios 5 and 6 browser 
			https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering
		*/
		#appCanvas {   
			image-rendering:-webkit-optimize-contrast; 
			image-rendering:pixelated;  
			image-rendering:moz-crisp-edges; 
			image-rendering:-o-crisp-edges;    
			-ms-interpolation-mode: nearest-neighbor;
			
			image-rendering:optimizeSpeed;              /* Legal fallback                 */
			image-rendering:-moz-crisp-edges;           /* Firefox                        */
			image-rendering:crisp-edges;                /* CSS3 Proposed                  */
			}
		.doubleCanvas {
			width: 1056px;    
			height: 552px;  
		}
		.singleCanvas {
			width: 528;
			height: 276;
		}
		
	div#container
		canvas(id="appCanvas", class="doubleCanvas", width="528", height="276")
		
	
	//	
		div#chat
			div(style='width:600px; height:400px') 
			form
				input(autocomplete=off, size=50)
		
		script(type='text/javascript').
			var chatInput = $('#chat input');
			var chatLog = $('#chat div');
			var chatForm = $('#chat form');
		
			chatInput.focus();
			chatForm.submit(function() {
				sockjs.send(JSON.stringify({event:'say', data:{text: chatInput.val()}}));
				chatInput.val('');
				return false;
			});
			
			
			function chat(text) {
				chatLog.append($("<code>").text(text));
				chatLog.append($("<br>"));
				chatLog.scrollTop(chatLog.scrollTop()+10000);
			}
			
			
			
			sockjs.onopen    = function()  {
				$('#status').val(sockjs.protocol);
				var m = JSON.stringify({event:'login', data:{token:token, session:session}});
				console.log("connecting to session: " + m);
				sockjs.send(m);
			};
			sockjs.onmessage = function(e) {
				console.log(e.data);
				var message;
				try {
					message = JSON.parse(e.data);
				}
				catch (err) {
					// parse error - ignore message
				}
				
				if (message && message.event && (typeof message.event) === 'string') {
					dispatchMessage(message);
				}
			};
			sockjs.onclose   = function()  {$('#status').val("no");};
			
			
			function dispatchMessage(message) {
				switch(message.event) {
					case 'login': doLogin(message.data); break;
					case 'say': doSay(message.data); break;
					case 'join': doJoin(message.data); break;
					case 'leave': doLeave(message.data); break;
					case 'joined': doJoined(message.data); break;
				}
			}
			
			
			function doLogin(message) {
				if (!message.error) {
					chat("Hello " + message.nickname + "!");
				}
				else {
					chat("Couldn't log in.");
				}
			}
			
			function doSay(message) {
				if (message.nickname && message.text) {
					chat(message.nickname + ": " + message.text);
				}
			}
			
			function doJoin(message) {
				if (message.nickname) {
					chat(message.nickname + " arrived.");
				}
			}
			
			function doLeave(message) {
				if (message.nickname) {
					chat(message.nickname + " left.");
				}
			}
			
			function doJoined(message) {
				if (message.error) {
					chat("Couldn't enter " + message.roomName + " " + message.message);
				}
				else if (message.occupants && typeof message.occupants==='object') {
					chat("You entered " + message.roomName + ".")
					chat(message.occupants.join(" and ") + (message.occupants.length > 1 ? " are" : " is") + " here.");
				}
			}
			